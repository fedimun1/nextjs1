const bcrypt = require('bcryptjs');

module.exports = class User {
  constructor(id, username, passwordHash, role) {
    this.id = id;
    this.username = username;
    this.passwordHash = passwordHash;
    this.role = role;
  }

  async verifyPassword(password) {
    return await bcrypt.compare(password, this.passwordHash);
  }

  static async create(username, password, role) {
    const hashedPassword = await bcrypt.hash(password, 10);
    const pool = await mysql.createPool({
      // Your MySQL connection details
    });
    const [result] = await pool.query('INSERT INTO users (username, password_hash, role) VALUES (?, ?, ?)', [username, hashedPassword, role]);
    return new User(result.insertId, username, hashedPassword, role);
  }

  static async findByUsername(username) {
    const pool = await mysql.createPool({
      // Your MySQL connection details
    });
    const [result] = await pool.query('SELECT * FROM users WHERE username = ?', [username]);
    if (result.length === 0) {
      return null;
    }
    return new User(result[0].id, result[0].username, result[0].password_hash, result[0].role);
  }
};
